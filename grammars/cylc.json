{
    "scopeName": "source.cylc",
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "fileTypes": [
        "suite.rc",
        "suite.rc.processed",
        "cylc",
        "flow.rc",
        "flow-tests.rc"
    ],
    "name": "cylc",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#jinja2"
        },
        {
            "include": "#graphSections"
        },
        {
            "include": "#headers"
        },
        {
            "include": "#settings"
        },
        {
            "include": "#includeFiles"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "headers": {
            "patterns": [
                {
                    "name": "meta.section.cylc",
                    "match": "(\\[+)([^\\[\\]]+?)(\\]+)",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cylc"
                        },
                        "2": {
                            "name": "entity.name.tag.cylc",
                            "patterns": [
                                {
                                    "include": "#parameterizations"
                                },
                                {
                                    "include": "#jinja2"
                                }
                            ]
                        },
                        "3": {
                            "name": "punctuation.definition.tag.end.cylc"
                        }
                    },
                    "comment": "@TODO handle `+`, `-`, `/` chars; convert to begin/end instead of match?"
                }
            ]
        },
        "graphSections": {
            "patterns": [
                {
                    "comment": "Cylc 7 graph syntax",
                    "begin": "\\b(graph)[\\t ]*(=)[\\t ]*",
                    "end": "(?=[#\\n\\r])",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.graph.cylc"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.cylc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#graphStrings"
                        },
                        {
                            "comment": "In this situation, we cannot have string after string, or string on new line",
                            "match": "(?:^|(?<=\"))[\\t ]*+([^#\\n\\r]+)",
                            "captures": {
                                "1": {
                                    "name": "invalid.illegal.string.cylc"
                                }
                            }
                        }
                    ]
                },
                {
                    "contentName": "meta.graph-section.cylc",
                    "comment": "Cylc 8 graph syntax",
                    "begin": "\\[{2}[\\t ]*graph[\\t ]*\\]{2}",
                    "end": "(?=^[\\t ]*\\[)",
                    "beginCaptures": {
                        "0": {
                            "patterns": [
                                {
                                    "include": "#headers"
                                }
                            ]
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "begin": "(\\S[^=#]*)(=)[\\t ]*",
                            "end": "(?=[#\\n\\r])",
                            "beginCaptures": {
                                "1": {
                                    "patterns": [
                                        {
                                            "include": "#jinja2"
                                        },
                                        {
                                            "name": "keyword.graph.cylc",
                                            "match": "[\\w\\+\\^\\$][\\w\\+\\-\\^\\$\\/\\t ,:]*"
                                        }
                                    ]
                                },
                                "2": {
                                    "name": "keyword.operator.assignment.cylc"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#graphStrings"
                                },
                                {
                                    "comment": "In this situation, we cannot have string after string, or string on new line",
                                    "match": "(?:^|(?<=\"))[\\t ]*+([^#\\n\\r]+)",
                                    "captures": {
                                        "1": {
                                            "name": "invalid.illegal.string.cylc"
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "graphStrings": {
            "patterns": [
                {
                    "name": "meta.graph-syntax.quoted.triple.cylc",
                    "begin": "\\G(\"{3})",
                    "end": "(\"{3})",
                    "beginCaptures": {
                        "0": {
                            "name": "string.quoted.triple.cylc"
                        },
                        "1": {
                            "name": "punctuation.definition.string.begin.cylc"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "string.quoted.triple.cylc"
                        },
                        "1": {
                            "name": "punctuation.definition.string.end.cylc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#graphSyntax"
                        }
                    ]
                },
                {
                    "name": "meta.graph-syntax.quoted.double.cylc",
                    "begin": "\\G(\")",
                    "end": "([\"\\n\\r])",
                    "beginCaptures": {
                        "0": {
                            "name": "string.quoted.double.cylc"
                        },
                        "1": {
                            "name": "punctuation.definition.string.begin.cylc"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "string.quoted.double.cylc"
                        },
                        "1": {
                            "name": "punctuation.definition.string.end.cylc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#graphSyntax"
                        }
                    ]
                },
                {
                    "name": "meta.graph-syntax.unquoted.cylc",
                    "match": "\\G[^#\\n\\r\"]+",
                    "captures": {
                        "0": {
                            "patterns": [
                                {
                                    "include": "#graphSyntax"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "graphSyntax": {
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#parameterizations"
                },
                {
                    "include": "#jinja2"
                },
                {
                    "name": "meta.variable.task.cylc",
                    "match": "\\b\\w[\\w\\+\\-@%]*"
                },
                {
                    "name": "keyword.control.trigger.cylc",
                    "match": "=>"
                },
                {
                    "name": "keyword.other.logical.cylc",
                    "match": "[\\|&]"
                },
                {
                    "name": "meta.parens.cylc",
                    "begin": "\\(",
                    "end": "[\\)\\n\\r]",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.section.parens.begin.cylc"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.parens.end.cylc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#graphSyntax"
                        }
                    ]
                },
                {
                    "name": "meta.variable.suicide.cylc",
                    "match": "(?<=^|[\\s&>])(!)(\\b\\w[\\w\\+\\-@%]*)",
                    "captures": {
                        "1": {
                            "name": "keyword.other.suicide.cylc"
                        },
                        "2": {
                            "name": "meta.variable.task.cylc"
                        }
                    }
                },
                {
                    "name": "variable.other.xtrigger.cylc",
                    "match": "(@)[\\w\\-]+",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.variable.cylc"
                        }
                    }
                },
                {
                    "name": "constant.character.escape.continuation.cylc",
                    "match": "\\\\"
                },
                {
                    "comment": "e.g. foo:fail => bar",
                    "match": "(?<!^|[\\s:])((:)([\\w\\-]+))",
                    "captures": {
                        "1": {
                            "name": "meta.annotation.qualifier.cylc"
                        },
                        "2": {
                            "name": "punctuation.definition.annotation.cylc"
                        },
                        "3": {
                            "name": "variable.annotation.cylc"
                        }
                    }
                },
                {
                    "name": "meta.annotation.inter-cycle.cylc",
                    "comment": "e.g. foo[-P1]",
                    "begin": "(?<=\\S)\\[",
                    "end": "\\]",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.section.brackets.begin.cylc"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.brackets.end.cylc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#jinja2"
                        },
                        {
                            "include": "#intervals"
                        },
                        {
                            "include": "#isodatetimes"
                        },
                        {
                            "comment": "If 1st char is ^ (allowing for spaces)",
                            "match": "\\G[\\t ]*(\\^)",
                            "captures": {
                                "1": {
                                    "name": "constant.language.cycle-point.cylc"
                                }
                            }
                        },
                        {
                            "name": "keyword.operator.arithmetic.cylc",
                            "match": "[\\+\\-]"
                        },
                        {
                            "name": "constant.numeric.integer-point.cylc",
                            "comment": "Integer as long as it isn't adjacent to a letter",
                            "match": "\\b\\d+\\b"
                        }
                    ]
                }
            ]
        },
        "settings": {
            "patterns": [
                {
                    "name": "meta.setting.cylc",
                    "begin": "([^=#\\s][^=#\\n\\r]*?)?[\\t ]*(=)[\\t ]*",
                    "end": "(?=[#\\n\\r])",
                    "beginCaptures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#jinja2"
                                },
                                {
                                    "name": "variable.other.key.cylc",
                                    "match": "[\\w\\-\\t ]+"
                                }
                            ]
                        },
                        "2": {
                            "name": "keyword.operator.assignment.cylc"
                        }
                    },
                    "contentName": "meta.value.cylc",
                    "patterns": [
                        {
                            "include": "#strings"
                        },
                        {
                            "comment": "In this situation, we cannot have string after string, or string on new line",
                            "match": "(?:^|(?<=\"))[\\t ]*+([^#\\n\\r]+)",
                            "captures": {
                                "1": {
                                    "name": "invalid.illegal.string.cylc"
                                }
                            }
                        },
                        {
                            "include": "#jinja2"
                        },
                        {
                            "match": "([^#\\n\\r]+)",
                            "captures": {
                                "1": {
                                    "name": "string.unquoted.value.cylc",
                                    "patterns": [
                                        {
                                            "include": "#jinja2"
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "includeFiles": {
            "patterns": [
                {
                    "name": "meta.include.cylc",
                    "match": "(%include)[\\t ]*(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.include.cylc"
                        },
                        "2": {
                            "name": "string.cylc",
                            "patterns": [
                                {
                                    "include": "#comments"
                                },
                                {
                                    "include": "#jinja2"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.cylc",
                    "match": "\\b(if|for|while|return)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.triple.cylc",
                    "begin": "(\"{3})",
                    "end": "(\"{3})",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.cylc"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.cylc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#jinja2"
                        },
                        {
                            "name": "constant.character.escape.cylc",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.cylc",
                    "begin": "(\")",
                    "end": "([\"\\n\\r])",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.cylc"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.cylc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#jinja2"
                        },
                        {
                            "name": "constant.character.escape.cylc",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.cylc",
                    "match": "(#).*",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.cylc"
                        }
                    }
                }
            ]
        },
        "parameterizations": {
            "patterns": [
                {
                    "name": "meta.annotation.parameterization.cylc",
                    "begin": "<",
                    "end": ">",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.annotation.begin.cylc"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.annotation.end.cylc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#jinja2"
                        },
                        {
                            "name": "meta.polling.cylc",
                            "patterns": [
                                {
                                    "match": "([^\\s<>]+)(?=::)",
                                    "captures": {
                                        "1": {
                                            "name": "entity.name.namespace.suite.cylc"
                                        }
                                    }
                                },
                                {
                                    "name": "punctuation.accessor.cylc",
                                    "match": "(?<=\\S)::(?=\\S)"
                                },
                                {
                                    "match": "(?<=::)(\\b\\w[\\w\\+\\-@%]*)",
                                    "captures": {
                                        "1": {
                                            "name": "meta.variable.task.cylc"
                                        }
                                    }
                                },
                                {
                                    "comment": "e.g. foo:fail => bar",
                                    "match": "(?<!^|[\\s:])((:)([\\w\\-]+))",
                                    "captures": {
                                        "1": {
                                            "name": "meta.annotation.qualifier.cylc"
                                        },
                                        "2": {
                                            "name": "punctuation.definition.annotation.cylc"
                                        },
                                        "3": {
                                            "name": "variable.annotation.cylc"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            "match": "(\\w+)[\\t ]*(=)[\\t ]*(\\w+)",
                            "captures": {
                                "1": {
                                    "name": "variable.parameter.cylc"
                                },
                                "2": {
                                    "name": "keyword.operator.assignment.cylc"
                                },
                                "3": {
                                    "patterns": [
                                        {
                                            "name": "constant.numeric.cylc",
                                            "match": "\\d+$"
                                        },
                                        {
                                            "name": "variable.other.cylc",
                                            "match": "\\w+"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "match": "([\\+\\-])[\\t ]*(\\d+)(?!\\w)",
                            "captures": {
                                "1": {
                                    "name": "keyword.operator.arithmetic.cylc"
                                },
                                "2": {
                                    "name": "constant.numeric.cylc"
                                }
                            }
                        },
                        {
                            "name": "variable.parameter.cylc",
                            "match": "\\w+"
                        },
                        {
                            "name": "punctuation.separator.parameter.cylc",
                            "match": ","
                        }
                    ]
                }
            ]
        },
        "isodatetimes": {
            "patterns": [
                {
                    "name": "invalid.illegal.isodatetime.cylc",
                    "comment": "Malformed isodatetime e.g. 2000T00",
                    "match": "\\b\\d{3,7}T\\d{2,}Z?\\b"
                },
                {
                    "name": "invalid.illegal.isodatetime.cylc",
                    "comment": "Mixed long/short syntaxes e.g. 2000-12-01T0600",
                    "match": "\\b(\\d{4})(?:(\\-)(\\d{2}))?(?:(\\-)(\\d{2}))?T\\d{3,}\\b"
                },
                {
                    "name": "invalid.illegal.isodatetime.cylc",
                    "comment": "Mixed long/short syntaxes e.g. 20001201T06:00, 20001201T06+05:30",
                    "match": "\\b(\\d{4})(\\d{2})?(\\d{2})?T\\d{2,}(?:[\\+\\-]\\d+)?\\:\\d*\\b"
                },
                {
                    "name": "constant.numeric.isodatetime.long.cylc",
                    "match": "\\b(\\d{4})(?:(\\-)(\\d{2}))?(?:(\\-)(\\d{2}))?(?:(T)(\\d{2})(?:(:)(\\d{2}))?(?:(:)(\\d{2}))?((Z)|(?:([\\+\\-])(\\d{2})(?:(\\:)(\\d{2}))?))?)?\\b",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.year.cylc"
                        },
                        "2": {
                            "name": "punctuation.separator.date.cylc"
                        },
                        "3": {
                            "name": "constant.numeric.month.cylc"
                        },
                        "4": {
                            "name": "punctuation.separator.date.cylc"
                        },
                        "5": {
                            "name": "constant.numeric.day.cylc"
                        },
                        "6": {
                            "name": "punctuation.definition.time.cylc"
                        },
                        "7": {
                            "name": "constant.numeric.hour.cylc"
                        },
                        "8": {
                            "name": "punctuation.separator.time.cylc"
                        },
                        "9": {
                            "name": "constant.numeric.min.cylc"
                        },
                        "10": {
                            "name": "punctuation.separator.time.cylc"
                        },
                        "11": {
                            "name": "constant.numeric.sec.cylc"
                        },
                        "12": {
                            "name": "constant.numeric.timezone.long.cylc"
                        },
                        "13": {
                            "name": "punctuation.definition.timezone.cylc"
                        },
                        "14": {
                            "name": "punctuation.definition.timezone.cylc"
                        },
                        "15": {
                            "name": "constant.numeric.hour.cylc"
                        },
                        "16": {
                            "name": "punctuation.separator.time.cylc"
                        },
                        "17": {
                            "name": "constant.numeric.min.cylc"
                        }
                    }
                },
                {
                    "name": "constant.numeric.isodatetime.short.cylc",
                    "match": "\\b(\\d{4})(\\d{2})?(\\d{2})?(?:(T)(\\d{2})(\\d{2})?(\\d{2})?((Z)|(?:([\\+\\-])(\\d{2})(\\d{2})?))?)?\\b",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.year.cylc"
                        },
                        "2": {
                            "name": "constant.numeric.month.cylc"
                        },
                        "3": {
                            "name": "constant.numeric.day.cylc"
                        },
                        "4": {
                            "name": "punctuation.definition.time.cylc"
                        },
                        "5": {
                            "name": "constant.numeric.hour.cylc"
                        },
                        "6": {
                            "name": "constant.numeric.min.cylc"
                        },
                        "7": {
                            "name": "constant.numeric.sec.cylc"
                        },
                        "8": {
                            "name": "constant.numeric.isotimezone.short.cylc"
                        },
                        "9": {
                            "name": "punctuation.definition.timezone.cylc"
                        },
                        "10": {
                            "name": "punctuation.definition.timezone.cylc"
                        },
                        "11": {
                            "name": "constant.numeric.hour.cylc"
                        },
                        "12": {
                            "name": "constant.numeric.min.cylc"
                        }
                    }
                }
            ]
        },
        "intervals": {
            "patterns": [
                {
                    "name": "invalid.illegal.interval.cylc",
                    "comment": "e.g. P1H without T separator",
                    "match": "\\bP\\d+[HS]"
                },
                {
                    "name": "constant.numeric.interval.integer.cylc",
                    "comment": "e.g. P1 but not P1D",
                    "match": "\\b(P)\\d+\\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.period.cylc"
                        }
                    }
                },
                {
                    "name": "constant.numeric.interval.iso.cylc",
                    "comment": "e.g. P1W",
                    "match": "\\b(P)\\d+(W)\\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.period.cylc"
                        },
                        "2": {
                            "name": "punctuation.definition.week.cylc"
                        }
                    }
                },
                {
                    "name": "constant.numeric.interval.iso.cylc",
                    "comment": "e.g. P1Y1M1DT1H1M1S, P1D, PT1M. (P(?=(?:\\d|T\\d))) captures P only if followed by a digit or T. (?:\\d+(Y))? matches e.g. 1Y zero or more times, etc.",
                    "match": "\\b(P(?=(?:\\d|T\\d)))(?:\\d+(Y))?(?:\\d+(M))?(?:\\d+(D))?(?:(T)(?:\\d+(H))?(?:\\d+(M))?(?:\\d+(S))?)?\\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.period.cylc"
                        },
                        "2": {
                            "name": "punctuation.definition.year.cylc"
                        },
                        "3": {
                            "name": "punctuation.definition.month.cylc"
                        },
                        "4": {
                            "name": "punctuation.definition.day.cylc"
                        },
                        "5": {
                            "name": "punctuation.definition.time.cylc"
                        },
                        "6": {
                            "name": "punctuation.definition.hour.cylc"
                        },
                        "7": {
                            "name": "punctuation.definition.min.cylc"
                        },
                        "8": {
                            "name": "punctuation.definition.sec.cylc"
                        }
                    }
                }
            ]
        },
        "jinja2": {
            "patterns": [
                {
                    "name": "meta.embedded.block.jinja",
                    "comment": "e.g. {% ... %}",
                    "begin": "(?={%)",
                    "end": "(?<=%})",
                    "contentName": "source.jinja",
                    "patterns": [
                        {
                            "include": "source.jinja"
                        },
                        {
                            "match": "\\G{%[\\+\\-]?",
                            "name": "punctuation.definition.template-expression.begin.jinja"
                        },
                        {
                            "match": "\\-?%}",
                            "name": "punctuation.definition.template-expression.end.jinja"
                        }
                    ]
                },
                {
                    "name": "meta.embedded.block.jinja",
                    "comment": "e.g. {{ ... }}",
                    "begin": "(?={{)",
                    "end": "(?<=}})",
                    "contentName": "source.jinja",
                    "patterns": [
                        {
                            "include": "source.jinja"
                        },
                        {
                            "match": "\\G{{",
                            "name": "punctuation.definition.template-expression.begin.jinja"
                        },
                        {
                            "match": "}}",
                            "name": "punctuation.definition.template-expression.end.jinja"
                        }
                    ]
                },
                {
                    "name": "comment.block.jinja",
                    "comment": "e.g. {# ... #}",
                    "begin": "{#",
                    "end": "#}",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.begin.jinja"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.end.jinja"
                        }
                    }
                }
            ]
        }
    }
}
